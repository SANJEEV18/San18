plot(subrule, method="paracoord", control=list(reorder=TRUE))
#grouped visualization for subrule
plot(rules, method="grouped", control=list(k=50))
data<-quakes
View(data)
str(data)
data$NSPF<- factor(data$stations)
#Partion data into Training and Validation Datasets
set.seed(1234)
pd<-sample(2,nrow(data),replace=TRUE,prob=c(0.8,0.2))
train<-data[pd==1,]
validate<-data[pd==2,]
#Decision Tree with Party
library(party)
tree<-ctree(NSPF~lat+long+mag,data=train,controls = ctree_control(mincriterion = 0.99,minsplit = 5))
tree
plot(tree)
#Predict
predict(tree,validate)
#Decision Tree with rPart
library(rpart)
tree1<-rpart(NSPF~lat+long+mag,train)
#library(rpart.plot)
rpart.plot(tree1,extra=2)
#Predict
predict(tree1,validate)
#Decision Tree with rPart
library(rpart)
tree1<-rpart(NSPF~lat+long+mag,train)
library(rpart.plot)
rpart.plot(tree1,extra=2)
#Predict
predict(tree1,validate)
#Misclassification Error for 'train' data
tab<-table(predict(tree),train$NSPF)
print(tab)
1-sum(diag(tab))/sum(tab)
#Misclassification Error for validate data
testpred<-predict(tree,newdata=validate)
tab<-table(testpred,validate$NSPF)
print(tab)
data<-quakes
View(data)
str(data)
data$NSPF<- factor(data$stations)
#Partion data into Training and Validation Datasets
set.seed(1234)
pd<-sample(2,nrow(data),replace=TRUE,prob=c(0.8,0.2))
train<-data[pd==1,]
validate<-data[pd==2,]
#Decision Tree with Party
library(party)
tree<-ctree(NSPF~lat+long+mag,data=train,controls = ctree_control(mincriterion = 0.99,minsplit = 5))
tree
plot(tree)
#Predict
predict(tree,validate)
#Decision Tree with rPart
library(rpart)
tree1<-rpart(NSPF~lat+long+mag,train)
library(rpart.plot)
rpart.plot(tree1,extra=2)
#Predict
predict(tree1,validate)
#Misclassification Error for 'train' data
tab<-table(predict(tree),train$NSPF)
print(tab)
1-sum(diag(tab))/sum(tab)
#Misclassification Error for validate data
testpred<-predict(tree,newdata=validate)
tab<-table(testpred,validate$NSPF)
print(tab)
1-sum(diag(tab))/sum(tab)
# Load the Library
library("e1071")
# Load the Library
library("e1071")
# Load the Library
library("e1071")
library("naivebayes")
library("dplyr")
library("ggplot2")
library("psych")
# Load the Library
library("e1071")
library("naivebayes")
library("dplyr")
library("ggplot2")
library("psych")
#Load the dataset
data<- read.csv("D:/10/Spectacle.csv", header=TRUE)
#Structure of Data
View(data)
str(data)
xtabs(~Age+Power_Rate,data = data)
#Visualization
pairs.panels(data[-1])
data %>%
ggplot(aes(x=Spectacle_Prescription,y=Power_Rate,fill=Spectacle_Prescription))+
geom_boxplot()+
ggtitle("Box Plot")
data %>%
ggplot(aes(x=Spectacle_Prescription,fill=Astigmatism))+
geom_density(alpha=0.8,color='black')+
ggtitle("Density Plot")
#Data Partition
set.seed(1234)
ind<-sample(2,nrow(data),replace=T,prob=c(0.8,0.2))
train<-data[ind==1,]
test<-data[ind==2,]
#Naive Bayes Model
model<-naive_bayes(Age~.,data=train)
model
train %>%
filter(Power_Rate>="5") %>%
summarise(mean(Astigmatism),sd(Astigmatism))
plot(model)
#Predict
p<-predict(model,train,type='prob')
head(cbind(p,train))
#Confusion Matrix-train data
p1<-predict(model,train)
(tab1<-table(p1,train$Age))
1-sum(diag(tab1))/sum(tab1)
#Confusion Matrix-test data
p2<-predict(model,test)
(tab2<-table(p2,test$Age))
1-sum(diag(tab2))/sum(tab2)
# Load the Library
library("e1071")
install.packages("e1071")
# Load the Library
library("e1071")
library("naivebayes")
install.packages("naivebayes")
library("dplyr")
library("ggplot2")
library("psych")
install.packages("psych")
#Load the dataset
data<- read.csv("D:/10/Spectacle.csv", header=TRUE)
#Structure of Data
View(data)
str(data)
xtabs(~Age+Power_Rate,data = data)
#Visualization
pairs.panels(data[-1])
data %>%
ggplot(aes(x=Spectacle_Prescription,y=Power_Rate,fill=Spectacle_Prescription))+
geom_boxplot()+
ggtitle("Box Plot")
data %>%
ggplot(aes(x=Spectacle_Prescription,fill=Astigmatism))+
geom_density(alpha=0.8,color='black')+
ggtitle("Density Plot")
#Data Partition
set.seed(1234)
ind<-sample(2,nrow(data),replace=T,prob=c(0.8,0.2))
train<-data[ind==1,]
test<-data[ind==2,]
#Naive Bayes Model
model<-naive_bayes(Age~.,data=train)
model
train %>%
filter(Power_Rate>="5") %>%
summarise(mean(Astigmatism),sd(Astigmatism))
plot(model)
#Predict
p<-predict(model,train,type='prob')
head(cbind(p,train))
#Confusion Matrix-train data
p1<-predict(model,train)
(tab1<-table(p1,train$Age))
1-sum(diag(tab1))/sum(tab1)
#Confusion Matrix-test data
p2<-predict(model,test)
(tab2<-table(p2,test$Age))
1-sum(diag(tab2))/sum(tab2)
# Load the Library
library("e1071")
library("naivebayes")
library("dplyr")
library("ggplot2")
library("psych")
#Load the dataset
data<- read.csv("D:/10/Spectacle.csv", header=TRUE)
#Structure of Data
View(data)
str(data)
xtabs(~Age+Power_Rate,data = data)
#Visualization
pairs.panels(data[-1])
data %>%
ggplot(aes(x=Spectacle_Prescription,y=Power_Rate,fill=Spectacle_Prescription))+
geom_boxplot()+
ggtitle("Box Plot")
data %>%
ggplot(aes(x=Spectacle_Prescription,fill=Astigmatism))+
geom_density(alpha=0.8,color='black')+
ggtitle("Density Plot")
#Data Partition
set.seed(1234)
ind<-sample(2,nrow(data),replace=T,prob=c(0.8,0.2))
train<-data[ind==1,]
test<-data[ind==2,]
#Naive Bayes Model
model<-naive_bayes(Age~.,data=train)
model
train %>%
filter(Power_Rate>="5") %>%
summarise(mean(Astigmatism),sd(Astigmatism))
plot(model)
#Predict
p<-predict(model,train,type='prob')
head(cbind(p,train))
#Confusion Matrix-train data
p1<-predict(model,train)
(tab1<-table(p1,train$Age))
1-sum(diag(tab1))/sum(tab1)
#Confusion Matrix-test data
p2<-predict(model,test)
(tab2<-table(p2,test$Age))
1-sum(diag(tab2))/sum(tab2)
library(factoextra)
install.packages("factoextra")
library(bnlearn)
install.packages("bnlearn")
library(neuralnet)
install.packages("neuralnet")
library(factoextra)
library(bnlearn)
library(neuralnet)
#Load the dataset
data<- marks
head(data)
str(data)
View(data)
bn_df<- data.frame(data)
res<- hc(bn_df)
plot(res)
res$arcs<- res$arcs[-which((res$arcs[,'from'] == "Gender" &res$arcs[,'to'] == "Condition")),]
fittedbn<- bn.fit(res, data = bn_df)
print(fittedbn$STAT)
#constraint train
constraint<- hc(data)
print(constraint)
plot(constraint)
#probability table
print(fittedbn<- bn.fit(constraint, data = data))
#prediction
print(cpquery(fittedbn, event = (STAT>=80), evidence = ( MECH>=60 & VECT>=60 & ALG>=60 & ANL>=60 ) ))
#BACKPROPAGATION
head(data)
nn<- neuralnet(STAT ~  MECH+VECT+ALG+ANL, data=data, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn$result.matrix
#To plot the backpropogation
plot(nn)
install.packages("NbClust")
install.packages("cluster")
library(NbClust)
library(cluster)
data<- read.csv("D:/Studies/VIII Semester/R/Programs/Ex 10/Candidates.csv", header=TRUE)
library(NbClust)
library(cluster)
data<- read.csv("D:/10/Candidates.csv", header=TRUE)
head(data)
data_2<-data[-5]
head(data_2)
sapply(data,mean)
sapply(data,sd)
sapply(data_2,mean)
sapply(data_2,sd)
data_kmeans<-kmeans(data_2,centers = 2, nstart = 5)
data_kmeans$centers
data_kmeans$size
data$clstr<-data_kmeans$cluster
data$clstr<-data_kmeans$cluster
fviz_cluster(data_kmeans, data = data_2)
pam.res <- pam(data_2, 2)
print(pam.res)
head(pam.res$clustering)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
ellipse.type = "t", # Concentration ellipse
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_classic())
library(fpc)
data<- read.csv("D:/Studies/VIII Semester/R/Programs/Ex 10/Candidates.csv", header=TRUE)
data2<-data
data2$Name<-NULL
data2$Category<-NULL
data2$Gender<-NULL
library(fpc)
install.packages("fpc")
library(fpc)
data<- read.csv("D:/10/Candidates.csv", header=TRUE)
data2<-data
data2$Name<-NULL
data2$Category<-NULL
data2$Gender<-NULL
pamk.result<-pamk(data2)
pamk.result$nc
layout(matrix(c(1,2),1,2))
plot(pamk.result$pamobject)
library(cluster)
data2<-data
data2$Name<-NULL
data2$Category<-NULL
data2$Gender<-NULL
pam.result<-pam(data2,3)
layout(matrix(c(1,2),1,2))
plot(pam.result)
library(factoextra)
library(bnlearn)
library(neuralnet)
#Load the dataset
data<- marks
head(data)
str(data)
View(data)
bn_df<- data.frame(data)
res<- hc(bn_df)
plot(res)
res$arcs<- res$arcs[-which((res$arcs[,'from'] == "Gender" &res$arcs[,'to'] == "Condition")),]
fittedbn<- bn.fit(res, data = bn_df)
print(fittedbn$STAT)
#constraint train
constraint<- hc(data)
print(constraint)
plot(constraint)
#probability table
print(fittedbn<- bn.fit(constraint, data = data))
#prediction
print(cpquery(fittedbn, event = (STAT>=80), evidence = ( MECH>=60 & VECT>=60 & ALG>=60 & ANL>=60 ) ))
#BACKPROPAGATION
head(data)
nn<- neuralnet(STAT ~  MECH+VECT+ALG+ANL, data=data, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn$result.matrix
#To plot the backpropogation
plot(nn)
library(NbClust)
library(cluster)
data<- read.csv("D:/10/Candidates.csv", header=TRUE)
head(data)
data_2<-data[-5]
head(data_2)
sapply(data,mean)
sapply(data,sd)
sapply(data_2,mean)
sapply(data_2,sd)
data_kmeans<-kmeans(data_2,centers = 2, nstart = 5)
data_kmeans$centers
data_kmeans$size
data$clstr<-data_kmeans$cluster
data$clstr<-data_kmeans$cluster
fviz_cluster(data_kmeans, data = data_2)
pam.res <- pam(data_2, 2)
print(pam.res)
head(pam.res$clustering)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
ellipse.type = "t", # Concentration ellipse
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_classic())
library(fpc)
data<- read.csv("D:/10/Candidates.csv", header=TRUE)
data2<-data
data2$Name<-NULL
data2$Category<-NULL
data2$Gender<-NULL
pamk.result<-pamk(data2)
pamk.result$nc
layout(matrix(c(1,2),1,2))
plot(pamk.result$pamobject)
library(cluster)
data2<-data
data2$Name<-NULL
data2$Category<-NULL
data2$Gender<-NULL
pam.result<-pam(data2,3)
layout(matrix(c(1,2),1,2))
plot(pam.result)
library(NbClust)
library(cluster)
data<- read.csv("D:/10/Candidates.csv", header=TRUE)
head(data)
data_2<-data[-5]
head(data_2)
sapply(data,mean)
sapply(data,sd)
sapply(data_2,mean)
sapply(data_2,sd)
data_kmeans<-kmeans(data_2,centers = 2, nstart = 5)
data_kmeans$centers
data_kmeans$size
data$clstr<-data_kmeans$cluster
data$clstr<-data_kmeans$cluster
fviz_cluster(data_kmeans, data = data_2)
pam.res <- pam(data_2, 2)
print(pam.res)
head(pam.res$clustering)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
ellipse.type = "t", # Concentration ellipse
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_classic())
library(fpc)
data<- read.csv("D:/10/Candidates.csv", header=TRUE)
data2<-data
data2$Name<-NULL
data2$Category<-NULL
data2$Gender<-NULL
pamk.result<-pamk(data2)
pamk.result$nc
layout(matrix(c(1,2),1,2))
plot(pamk.result$pamobject)
library(cluster)
library(NbClust)
library(cluster)
data<- read.csv("D:/10/Candidates.csv", header=TRUE)
head(data)
data_2<-data[-5]
head(data_2)
sapply(data,mean)
sapply(data,sd)
sapply(data_2,mean)
sapply(data_2,sd)
data_kmeans<-kmeans(data_2,centers = 2, nstart = 5)
data_kmeans$centers
data_kmeans$size
data$clstr<-data_kmeans$cluster
data$clstr<-data_kmeans$cluster
fviz_cluster(data_kmeans, data = data_2)
pam.res <- pam(data_2, 2)
print(pam.res)
head(pam.res$clustering)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
ellipse.type = "t", # Concentration ellipse
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_classic())
library(fpc)
data<- read.csv("D:/10/Candidates.csv", header=TRUE)
data2<-data
data2$Name<-NULL
data2$Category<-NULL
data2$Gender<-NULL
pamk.result<-pamk(data2)
pamk.result$nc
layout(matrix(c(1,2),1,2))
plot(pamk.result$pamobject)
library(cluster)
library(NbClust)
library(cluster)
data<- read.csv("D:/10/Candidates.csv", header=TRUE)
head(data)
data_2<-data[-5]
head(data_2)
sapply(data,mean)
sapply(data,sd)
sapply(data_2,mean)
sapply(data_2,sd)
data_kmeans<-kmeans(data_2,centers = 2, nstart = 5)
data_kmeans$centers
data_kmeans$size
data$clstr<-data_kmeans$cluster
data$clstr<-data_kmeans$cluster
fviz_cluster(data_kmeans, data = data_2)
pam.res <- pam(data_2, 2)
print(pam.res)
head(pam.res$clustering)
fviz_cluster(pam.res,
palette = c("#00AFBB", "#FC4E07"), # color palette
ellipse.type = "t", # Concentration ellipse
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_classic())
library(fpc)
data<- read.csv("D:/10/Candidates.csv", header=TRUE)
data2<-data
data2$Name<-NULL
data2$Category<-NULL
data2$Gender<-NULL
pamk.result<-pamk(data2)
pamk.result$nc
layout(matrix(c(1,2),1,2))
plot(pamk.result$pamobject)
library(cluster)
data2<-data
data2$Name<-NULL
data2$Category<-NULL
data2$Gender<-NULL
pam.result<-pam(data2,3)
layout(matrix(c(1,2),1,2))
plot(pam.result)
print(pam.res)
print(pam.res)
install.packages("NLP")
install.packages("tm",dependencies = TRUE)
library(NLP)
library(tm)
install.packages("tm")
install.packages("tmap")
install.packages("NLP")
install.packages("tm",dependencies=TRUE)
library(NLP)
library(tm)
library(tmap)
text <- readLines(file.choose())
TextDoc <- VCorpus(VectorSource(text))
mycorpus <- tm_map(TextDoc, removePunctuation)
dataframe <- data.frame(text=unlist(sapply(mycorpus, `[`, "content")),stringsAsFactors=F)
dataframe
